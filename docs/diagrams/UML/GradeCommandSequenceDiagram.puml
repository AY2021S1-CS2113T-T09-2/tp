@startuml
-> ":GradeCommandParser": prepareGradeCommand()
activate ":GradeCommandParser"
create ":GradeCommand"
":GradeCommandParser" -> ":GradeCommand": <<construct>> GradeCommand(module,moduleCredit,grade)
activate ":GradeCommand"
":GradeCommandParser" <-- ":GradeCommand" : GradeCommand
deactivate ":GradeCommand"
<-- ":GradeCommandParser" : GradeCommand
deactivate ":GradeCommandParser"
destroy ":GradeCommandParser"
-> ":GradeCommand" : execute()
activate ":GradeCommand"
deactivate ":GradeCommandParser"
":GradeCommand" -> ":ModuleManager" : getModule()
activate ":ModuleManager"
":GradeCommand" <-- ":ModuleManager" :moduleToBeGraded
deactivate ":ModuleManager"
":GradeCommand" -> ":GradeCommand" : grade(moduleToBeGraded)
alt testGrade(grade)
    activate ":GradeCommand"
    ":GradeCommand" -> ":ModuleManager" :grade(module,grade,moduleCredit)
    activate ":ModuleManager"
    ":GradeCommand" <-- ":ModuleManager"
    deactivate ":ModuleManager"
else
    <-- ":GradeCommand" : InvalidGradeException()
end
":GradeCommand" --> ":GradeCommand"
deactivate ":GradeCommand"
create ":CommandResult"
":GradeCommand" -> ":CommandResult" : <<construct>>
activate ":CommandResult"
":GradeCommand" <-- ":CommandResult" : CommandResult
deactivate ":CommandResult"
<- ":GradeCommand" : CommandResult
deactivate ":GradeCommand"
destroy ":GradeCommand"
@enduml